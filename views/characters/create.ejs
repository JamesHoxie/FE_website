<!DOCTYPE html>
<html lang="en">
  <%- include('../partials/head.ejs') %>
  
<body>
  <%- include('../partials/usergreeting.ejs') %>
  <!--BEGIN body-container-->
  <div class="body-container">
    <div class="header-container">
      <h1 id="page-title">Fire Emblem Character Profiles</h1>
      <%- include('../partials/nav.ejs') %>
    </div>

    <!--BEGIN parchment-container-->
    <div class="parchment-container">
      <!--BEGIN main-content container-->
      <div class="main-content-container">
        <div class="create-character-profile content">
          <h2>Character Profile Creation Page</h2>
          <form action="/characters/create" enctype="multipart/form-data" method="POST">
              <input type="hidden" id="portrait-url" name="portrait-url" value="Fire_Emblem_Logo.png">
              <label for="name">Character Name</label>
              <input type="text" id="name" name="name" required>
              <label for="quote">Character Quote</label>
              <input type="text" id="quote" name="quote">
              <label for="bio">Character Bio</label>
              <textarea id="bio" name="bio"></textarea>
              <label for="portrait">Character Portrait:</label>
              <input type="file" id="portrait" name="portrait" accept="image/*">
              <button>Submit</button>
          </form>
        </div>            
      </div>
      <!--END MAIN-CONTENT CONTAINER-->
    </div>
    <!--END PARCHMENT CONTAINER-->
    <%- include('../partials/footer.ejs') %>
  </div>
  <!--END body-container-->
  <script>
    "use strict";
    // params for image upload
    let imageFile = null;
    let signedRequestS3 = null;
    let responseURL = null;

    // generate random id for uploaded image file name
    function generateName(fileName) {
      let fileExtension = fileName.split('.');
      fileExtension = fileExtension[fileExtension.length - 1];
      fileName = fileName + new Date().toString();
      let hash = 0;
      let chr = '';

      for (let i = 0; i < fileName.length; i++) {
        chr   = fileName.charCodeAt(i);
        hash  = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
      }

      return hash + '.' + fileExtension;
    }

    // named handler function for submit button on click, removed later if image upload is cancelled in form by user
    async function submitHandler(e) {
      e.preventDefault();
      try {
        await uploadFile(imageFile, signedRequestS3, responseURL);
        
      } catch(error) {
        console.log(error);
      }
      document.querySelector('form').submit();
    }
    
    /* Function to carry out the actual PUT request to S3 using the signed request from the app. */
    function uploadFile(fileUpload, signedS3Request, respURL) {
      return new Promise((resolve, reject) => {
        document.getElementById('portrait-url').value = respURL;
        const xhr = new XMLHttpRequest();
        xhr.open('PUT', signedS3Request);
        xhr.onreadystatechange = () => {
          if(xhr.readyState === 4){
            if(xhr.status === 200){
              console.log('uploaded file');
              resolve('success');
            }
            else{
              console.log('could not upload file');
              reject('error');
            }
          }
        };
        xhr.send(fileUpload);
      });
    }

    /* Function to get the temporary signed request from the app.
      If request successful, set up event listener on form to upload the image upon form submission */
    function getSignedRequest(file) {
      const xhr = new XMLHttpRequest();
      xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
      xhr.open('GET', `/sign-s3?file-name=${file.name}&file-type=${file.type}`);
      xhr.onreadystatechange = () => {
        if(xhr.readyState === 4){
          if(xhr.status === 200){
            const response = JSON.parse(xhr.responseText);
            // enable submit button now that image is ready for upload to s3
            document.querySelector('button').disabled = false;
            
            // set portrait url for storage in mongodb
            document.getElementById('portrait-url').value = response.url;

            // set params for upload for handler
            imageFile = file;
            signedRequestS3 = response.signedRequest;
            responseURL = response.url;
            // attach event handler to submit button to prevent form from submitting until the image is uploaded
            // to s3 successfully. click on form triggers submit event, but first triggers click event,
            // default on click event is to send submit event, so by preventing the default there is time
            // to send the request for image upload to s3, then manually trigger a submit event 
            // (not click event to avoid infinite loop)
            document.querySelector('form button').addEventListener('click', submitHandler);
          }
          else{
            console.log('Could not get signed URL.');
          }
        }
      };
      xhr.send();
    }

    /* Function called when file input updated. If there is a file selected, then
      start upload procedure by asking for a signed request from the app. */
    function initUpload() {
      // disable submit button until image is ready for upload to s3
      document.querySelector('button').disabled = true;
      const files = document.getElementById('portrait').files;
      const file = files[0];
      if(file == null) {
        // set file upload back to default portrait if cancel is selected on file upload button
        document.getElementById('portrait-url').value = "Fire_Emblem_Logo.png";
        // remove click event handler from submit button since file is not longer selected for upload
        document.querySelector('form button').removeEventListener('click', submitHandler);
        // enable submit button now that no image was selected for upload to s3
        document.querySelector('button').disabled = false;

        return;
      }
      // change file name
      let fileExtension = file.name.split('.');
      fileExtension = fileExtension[fileExtension.length - 1];
      console.log(fileExtension);
      const newFile = new File([file], generateName(file.name), {type: "image/" + fileExtension});
      getSignedRequest(newFile);
    } 
  
    /* Bind listeners when the page loads. */
    (() => {
        document.getElementById('portrait').onchange = initUpload;
    })();
  </script>
</body>
</html>